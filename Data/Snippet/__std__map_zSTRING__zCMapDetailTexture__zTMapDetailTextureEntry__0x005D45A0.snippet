<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title><![CDATA[std::map<zSTRING, zCMapDetailTexture::zTMapDetailTextureEntry, std::less<zSTRING>, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>>::map<zSTRING, zCMapDetailTexture::zTMapDetailTextureEntry, std::less<zSTRING>, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>>(std::less<zSTRING>const&, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>const&)]]></Title>
			<Description><![CDATA[public: __thiscall std::map<zSTRING, zCMapDetailTexture::zTMapDetailTextureEntry, std::less<zSTRING>, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>>::map<zSTRING, zCMapDetailTexture::zTMapDetailTextureEntry, std::less<zSTRING>, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>>(std::less<zSTRING>const&, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>const&)]]></Description>
			<Author>TopLayer</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="cpp"><![CDATA[// WARNING!!! Supported versions: G1A, G2
struct std__map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry___map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry__ : std::map<zSTRING, zCMapDetailTexture::zTMapDetailTextureEntry, std::less<zSTRING>, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>> { void operator()(std::less<zSTRING>const&, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>const&); };
BindedHook Ivk_std__map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry___map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry__{ ZENFOR(0x00000000, 0x005D1490, 0x005D45A0, 0x00000000), &std__map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry___map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry__::operator() };
void std__map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry___map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry__::operator()(std::less<zSTRING>const& a0, std::allocator<zCMapDetailTexture::zTMapDetailTextureEntry>const& a1)
{
	THISCALL(Ivk_std__map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry___map_zSTRING__zCMapDetailTexture__zTMapDetailTextureEntry__std__less_zSTRING___std__allocator_zCMapDetailTexture__zTMapDetailTextureEntry__)(a0, a1);
}
$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>